

# This file was *autogenerated* from the file curveball.sage
from sage.all_cmdline import *   # import sage library

_sage_const_13382 = Integer(13382); _sage_const_0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff = Integer(0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff); _sage_const_0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc = Integer(0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc); _sage_const_0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b = Integer(0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b); _sage_const_2 = Integer(2); _sage_const_0x3B827FF5E8EA151E6E51F8D0ABF08D90F571914A595891F9998A5BD49DFA3531 = Integer(0x3B827FF5E8EA151E6E51F8D0ABF08D90F571914A595891F9998A5BD49DFA3531); _sage_const_0xAB61705C502CA0F7AA127DEC096B2BBDC9BD3B4281808B3740C320810888592A = Integer(0xAB61705C502CA0F7AA127DEC096B2BBDC9BD3B4281808B3740C320810888592A); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
from json import dumps 
from pwn import * 
r = remote('socket.cryptohack.org', int(_sage_const_13382 ))
def send(**kwargs):
    r.sendline(dumps(kwargs).encode())
p = _sage_const_0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff 
a = _sage_const_0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc 
b = _sage_const_0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b  
E = EllipticCurve(GF(p), [a,b])
ring = Integers(E.order())
host = 'www.bing.com'
d = _sage_const_2  
curve = 'secp256r1'
pubkey = E((_sage_const_0x3B827FF5E8EA151E6E51F8D0ABF08D90F571914A595891F9998A5BD49DFA3531 , _sage_const_0xAB61705C502CA0F7AA127DEC096B2BBDC9BD3B4281808B3740C320810888592A ))
g = pubkey*int(ring(d)**-_sage_const_1 )
send(private_key = int(d), host = host, curve = curve, generator = [int(g[_sage_const_0 ]), int(g[_sage_const_1 ])])
r.interactive()


