

# This file was *autogenerated* from the file carryout.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_124 = Integer(124); _sage_const_120 = Integer(120); _sage_const_117 = Integer(117); _sage_const_114 = Integer(114); _sage_const_112 = Integer(112); _sage_const_110 = Integer(110); _sage_const_109 = Integer(109); _sage_const_108 = Integer(108); _sage_const_107 = Integer(107); _sage_const_106 = Integer(106); _sage_const_105 = Integer(105); _sage_const_102 = Integer(102); _sage_const_100 = Integer(100); _sage_const_94 = Integer(94); _sage_const_93 = Integer(93); _sage_const_89 = Integer(89); _sage_const_85 = Integer(85); _sage_const_82 = Integer(82); _sage_const_81 = Integer(81); _sage_const_80 = Integer(80); _sage_const_78 = Integer(78); _sage_const_77 = Integer(77); _sage_const_76 = Integer(76); _sage_const_74 = Integer(74); _sage_const_68 = Integer(68); _sage_const_67 = Integer(67); _sage_const_61 = Integer(61); _sage_const_56 = Integer(56); _sage_const_54 = Integer(54); _sage_const_52 = Integer(52); _sage_const_48 = Integer(48); _sage_const_46 = Integer(46); _sage_const_45 = Integer(45); _sage_const_43 = Integer(43); _sage_const_40 = Integer(40); _sage_const_38 = Integer(38); _sage_const_36 = Integer(36); _sage_const_29 = Integer(29); _sage_const_28 = Integer(28); _sage_const_18 = Integer(18); _sage_const_17 = Integer(17); _sage_const_14 = Integer(14); _sage_const_12 = Integer(12); _sage_const_10 = Integer(10); _sage_const_9 = Integer(9); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_0xFFFFFFFFFFFFFFFF = Integer(0xFFFFFFFFFFFFFFFF); _sage_const_8 = Integer(8)
import string
field = PolynomialRing(GF(_sage_const_2 ), 'x')
x = field.gen()
p = x**_sage_const_124  + x**_sage_const_120  + x**_sage_const_117  + x**_sage_const_114  + x**_sage_const_112  + x**_sage_const_110  + x**_sage_const_109  + x**_sage_const_108  + x**_sage_const_107  + x**_sage_const_106  + x**_sage_const_105  + x**_sage_const_102  + x**_sage_const_100  + x**_sage_const_94  + x**_sage_const_93  + x**_sage_const_89  + x**_sage_const_85  + x**_sage_const_82  + x**_sage_const_81  + x**_sage_const_80  + x**_sage_const_78  + x**_sage_const_77  + x**_sage_const_76  + x**_sage_const_74  + x**_sage_const_68  + x**_sage_const_67  + x**_sage_const_61  + x**_sage_const_56  + x**_sage_const_54  + x**_sage_const_52  + x**_sage_const_48  + x**_sage_const_46  + x**_sage_const_45  + x**_sage_const_43  + x**_sage_const_40  + x**_sage_const_38  + x**_sage_const_36  + x**_sage_const_29  + x**_sage_const_28  + x**_sage_const_18  + x**_sage_const_17  + x**_sage_const_14  + x**_sage_const_12  + x**_sage_const_10  + x**_sage_const_9  + x**_sage_const_6  + x**_sage_const_5  + x
f = p.factor()
results = {}
for mask in range(_sage_const_0 , _sage_const_1 <<len(f)):
  prod = x**_sage_const_0 
  for i in range(len(f)):
    if mask & (_sage_const_1 <<i):
      prod *= (f[i][_sage_const_0 ] ** f[i][_sage_const_1 ])
  res = _sage_const_0 
  for e in prod.exponents():
    res |= _sage_const_1 <<e 
  if res > _sage_const_0xFFFFFFFFFFFFFFFF : continue
  b = int(res).to_bytes(_sage_const_8 , 'little')
  results[mask] = b
  if b.startswith(b'{') and all([chr(c) in string.printable for c in b]):
    other = field(p/prod)
    othern = _sage_const_0 
    for e in other.exponents():
      othern |= _sage_const_1 <<e 
    otherb = int(othern).to_bytes(_sage_const_8 , 'little')
    print(b'ictf'+b+otherb+b'}')

