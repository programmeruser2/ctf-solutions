code
flag = ''
def interpret(inp):
    i = 0
    mem = [0] * 30000
    ptr = 30000//2
    stack = []
    steps = 0
    out = ''
    while i < len(code):
        steps += 1
        ins = code[i]
        if ins == '>':
            ptr += 1
        elif ins == '<':
            ptr -= 1
        elif ins == '+':
            mem[ptr] = (mem[ptr] + 1) % 256
            #print('add',ptr)
        elif ins == '-':
            mem[ptr] = (mem[ptr] - 1) % 256
            #print('minus',ptr)
        elif ins == '.':
            #print(chr(mem[ptr]), end='')
            out += chr(mem[ptr])
        elif ins == ',':
            #print('inp into',ptr)
            mem[ptr] = ord(inp[-1]) if len(inp)>0 else 0
            inp = inp[:-1]
        elif ins == '[':
            stack.append(i)
        elif ins == ']':
            #print('cmp',ptr,mem[ptr])
            if mem[ptr] > 0:
                i = stack[-1]
                continue
            else:
                stack.pop()
        i += 1
    #print(mem)
    return (steps, out)
#interpret('a')
#exit(0)
#l = 0
"""while True:
    b = False
    try:
        interpret(flag)
        b = True
    except Exception as e:
        #print(l)
        print(l,e)
        l += 1
        flag += 'a'
    if b: break"""
#print(l)
#print(interpret('ictf{'+'a'*43))
#print(interpret('ic'+'a'*46))
#print(interpret('i'*48))
#print(interpret('a'*48))

#print(interpret('ictf'))
#print(interpret('icaa'))
#print(interpret('aaaa'))
#print(interpret('ic'))
#print(interpret('aa'))

#print(interpret('ictf'))

flag = 'ic'
import string
while True:
    print('flag=',flag)
    minstep = 5000000000000
    minsc = 0
    for c in string.printable:
        t = flag+c
        (s, _) = interpret(t)
        if s<minstep:
            minstep = s
            minsc = ord(c)
    flag += chr(minsc)
    print(interpret(flag))
    if not ('fail' in interpret(flag)[1]):
        break

